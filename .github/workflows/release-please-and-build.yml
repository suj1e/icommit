# 整合release-please和build工作流的完整CI/CD流程
# - 自动版本管理
# - 构建、测试、代码检查
# - 插件验证
# - 自动发布

name: Release-Please and Build

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # 阶段1: 版本管理 - 仅在main分支推送时运行
  release-please:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      release_created: ${{ steps.release-please.outputs.release_created }}
      tag_name: ${{ steps.release-please.outputs.tag_name }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release-please
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # 使用项目根目录的release-please-config.json配置

  # 阶段2: 构建与测试 - 根据事件类型设置不同的依赖关系
  build:
    name: Build
    runs-on: ubuntu-latest
    # 在main分支推送时依赖于release-please，PR时直接运行
    needs: ['release-please']
    steps:
      # 释放GitHub Actions环境磁盘空间
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          large-packages: false

      # 检出当前代码库 - 在main分支推送时需要获取更新后的代码
      - name: Fetch Sources
        uses: actions/checkout@v5
        with:
          # 如果是main分支推送且创建了新版本，获取更新后的代码
          ref: ${{ github.event_name == 'push' && needs.release-please.outputs.release_created == 'true' && github.ref || github.ref }}

      # 设置Java环境
      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: zulu
          java-version: 21

      # 设置Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # 构建插件
      - name: Build plugin
        run: ./gradlew buildPlugin

      # 准备插件存档内容以创建构件
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip "$FILENAME" -d content

          echo "filename=${FILENAME:0:-4}" >> $GITHUB_OUTPUT

      # 存储已构建的插件作为可下载的构件
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # 运行测试并上传代码覆盖率报告
  test:
    name: Test
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      # 释放GitHub Actions环境磁盘空间
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          large-packages: false

      # 检出当前代码库
      - name: Fetch Sources
        uses: actions/checkout@v5

      # 设置Java环境
      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: zulu
          java-version: 21

      # 设置Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: true

      # 运行测试
      - name: Run Tests
        run: ./gradlew check

      # 收集失败测试的结果
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

  # 运行Qodana代码检查并提供报告
  inspectCode:
    name: Inspect code
    needs: [ build ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      pull-requests: write
    steps:
      # 释放GitHub Actions环境磁盘空间
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          large-packages: false

      # 检出当前代码库
      - name: Fetch Sources
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          fetch-depth: 0  # 代码检查需要完整的历史记录

      # 设置Java环境
      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: zulu
          java-version: 21

      # 运行Qodana代码检查
      - name: Qodana - Code Inspection
        uses: JetBrains/qodana-action@v2025.2.1
        with:
          cache-default-branch-only: true

  # 运行插件结构验证和IntelliJ插件验证器
  verify:
    name: Verify plugin
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      # 释放GitHub Actions环境磁盘空间
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          large-packages: false

      # 检出当前代码库
      - name: Fetch Sources
        uses: actions/checkout@v5

      # 设置Java环境
      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: zulu
          java-version: 21

      # 设置Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: true

      # 运行插件验证任务和IntelliJ插件验证器工具
      - name: Run Plugin Verification tasks
        run: ./gradlew verifyPlugin

      # 收集插件验证器结果
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

  # 阶段3: 发布 - 仅在release-please创建了新版本时运行
  publish-release:
    name: Publish Release
    if: ${{ needs.release-please.outputs.release_created == 'true' }}
    needs: [ release-please, build, test, inspectCode, verify ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # 检出当前代码库
      - name: Fetch Sources
        uses: actions/checkout@v5

      # 设置Java环境
      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: zulu
          java-version: 21

      # 构建插件的最终发布版本
      - name: Build Release Artifact
        run: ./gradlew buildPlugin

      # 下载之前上传的构建构件
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ICommit-${{ needs.release-please.outputs.tag_name }}
          path: ./build/distributions

      # 准备发布说明
      - name: Prepare Release Notes
        id: prepare_release_notes
        run: |
          CHANGELOG_CONTENT="$(cat CHANGELOG.md | grep -A 1000 "## ${{ needs.release-please.outputs.tag_name }}" | grep -B 1000 "## " | head -n -1)"
          echo "release_notes<<EOF\n${CHANGELOG_CONTENT}\nEOF" >> $GITHUB_OUTPUT

      # 更新GitHub Release，添加构建构件
      - name: Update Release with Artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 获取所有构建的ZIP文件
          cd build/distributions
          ARTIFACTS=(*.zip)
          # 更新发布，添加构件并取消草稿状态
          gh release edit ${{ needs.release-please.outputs.tag_name }} \
            --notes "${{ steps.prepare_release_notes.outputs.release_notes }}" \
            --draft=false \
            ${ARTIFACTS[@]/#/--attach=}